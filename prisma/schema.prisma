// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  APPROVED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id                       String     @id @default(cuid())
  name                     String
  email                    String     @unique
  password                 String
  role                     Role       @default(USER)
  defaultShippingAddressId String?
  defaultBillingAddressId  String?
  cartItems                CartItem[]
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
  addresses                Address[]
  orders                   Order[]

  @@map("users")
}

model Address {
  id        String   @id @default(cuid())
  district  String
  city      String
  postCode  Int
  details   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Product {
  id          String         @id @default(cuid())
  name        String
  description String
  price       Decimal
  tags        String
  products    OrderProduct[]
  cartItems   CartItem[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("products")
}

model CartItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

model Order {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  netAmount Decimal
  address   String
  products  OrderProduct[]
  events    OrderEvent[]
  status    OrderEventStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("orders")
}

model OrderProduct {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")
}

model OrderEvent {
  id        String           @id @default(cuid())
  order     Order            @relation(fields: [orderId], references: [id])
  orderId   String
  status    OrderEventStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("order_events")
}
